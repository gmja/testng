pipeline{
    agent any
    stages{
        stage('Clone'){
            steps {
                script{
                    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'mycreds_hub', url: 'https://github.com/pramodkumarpanda/http-django.repo.git']]])
                }
            }
        }
        stage ('Sonar tool install'){
            steps{
                script{
                    def var = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                    sh """
                    echo "$var"
                    """
                    }
            }
        }
        
        stage ('Sonar scanner'){
            steps{
                script{
                   def var = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                   withSonarQubeEnv ('sonarserver'){
                   sh """
                   $var/bin/sonar-scanner -Dsonar.projectKey=Project:python -Dsonar.projectName=python_new -Dsonar.sources=myproject
                   """
                   sleep(20)
                   }
                }
            }
        }
        stage('Check the quality gate'){
            steps{
                script{
                    try{
                timeout(time: 1, unit: 'MINUTES') {
                def qg = waitForQualityGate()
                echo $qg.status
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }            
                }    
                    
                    
                    }
                    catch(Exception qg_error){
                        println "Before Calling the function"
                        alrt_error()
                        println "After Calling the function"
                        error "Failed bcz of quality gate"
                    }
                }
            }
        }
        stage ('Upload to Artifactory'){
            steps{
                script{
                    rtUpload (
                            serverId: "Artifactory-1",
                            spec:
                                """{        
                                "files": [
                        {
                             "pattern": "/var/lib/jenkins/workspace/python-pipeline/myproject.tar",
                                "target": "cicd2/"
                               }
                            ]  
                   }"""
)
                }
                
        
            }
        }
        
    }
}
void alrt_error(){
                    
 sh "echo 'quality gate failed'"
                }
